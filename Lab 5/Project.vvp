#! /usr/bin/vvp
:ivl_version "0.9.7 " "(v0_9_7)";
:vpi_time_precision + 0;
:vpi_module "system";
:vpi_module "v2005_math";
:vpi_module "va_math";
S_0x24b1220 .scope module, "Processor" "Processor" 2 191;
 .timescale 0 0;
S_0x2498cc0 .scope module, "counter" "counter" 2 60;
 .timescale 0 0;
v0x24b33b0_0 .var "Read_addr", 31 0;
v0x24f65c0_0 .net "clk", 0 0, C4<z>; 0 drivers
v0x24f6660_0 .net "reset", 0 0, C4<z>; 0 drivers
E_0x2498de0 .event negedge, v0x24f65c0_0;
S_0x24b4810 .scope module, "test" "test" 2 196;
 .timescale 0 0;
v0x24f8980_0 .net "INaddr", 2 0, v0x24f8140_0; 1 drivers
v0x24f8a50_0 .net "Imm", 7 0, v0x24f8210_0; 1 drivers
v0x24f8b20_0 .net "OUT1", 7 0, v0x24f7ad0_0; 1 drivers
v0x24f8ba0_0 .net "OUT1addr", 2 0, v0x24f82c0_0; 1 drivers
v0x24f8c70_0 .net "OUT2", 7 0, v0x24f7cb0_0; 1 drivers
v0x24f8d40_0 .net "OUT2addr", 2 0, v0x24f8370_0; 1 drivers
v0x24f8e10_0 .net "OUTPUT", 7 0, L_0x24f98b0; 1 drivers
v0x24f8ee0_0 .var "Read_Addr", 31 0;
v0x24f8fb0_0 .net "Result", 7 0, v0x24f6a60_0; 1 drivers
v0x24f9080_0 .net "Select", 2 0, v0x24f8450_0; 1 drivers
v0x24f9160_0 .net "addSubMUX", 0 0, v0x24f8500_0; 1 drivers
v0x24f9230_0 .net "addSubMUXout", 7 0, v0x24f7310_0; 1 drivers
v0x24f9370_0 .var "clk", 0 0;
v0x24f9440_0 .net "imValueMUX", 0 0, v0x24f8580_0; 1 drivers
v0x24f9590_0 .net "imValueMUXout", 7 0, v0x24f6f10_0; 1 drivers
v0x24f9660_0 .net "instruction", 31 0, v0x24f88d0_0; 1 drivers
S_0x24f86b0 .scope module, "ir1" "Instruction_reg" 2 209, 2 101, S_0x24b4810;
 .timescale 0 0;
v0x24f87a0_0 .net "Read_Addr", 31 0, v0x24f8ee0_0; 1 drivers
v0x24f8820_0 .net "clk", 0 0, v0x24f9370_0; 1 drivers
v0x24f88d0_0 .var "instruction", 31 0;
S_0x24f7fe0 .scope module, "cu1" "CU" 2 210, 2 114, S_0x24b4810;
 .timescale 0 0;
v0x24f8140_0 .var "INaddr", 2 0;
v0x24f8210_0 .var "Imm", 7 0;
v0x24f82c0_0 .var "OUT1addr", 2 0;
v0x24f8370_0 .var "OUT2addr", 2 0;
v0x24f8450_0 .var "Select", 2 0;
v0x24f8500_0 .var "addSubMUX", 0 0;
v0x24f8580_0 .var "imValueMUX", 0 0;
v0x24f8630_0 .alias "instruction", 31 0, v0x24f9660_0;
E_0x24f80d0 .event edge, v0x24f8630_0;
S_0x24f76c0 .scope module, "rf1" "regfile8x8a" 2 211, 2 29, S_0x24b4810;
 .timescale 0 0;
v0x24f7830_0 .alias "IN", 7 0, v0x24f8fb0_0;
v0x24f7900_0 .alias "INaddr", 2 0, v0x24f8980_0;
v0x24f7980_0 .alias "OUT1", 7 0, v0x24f8b20_0;
v0x24f7a50_0 .alias "OUT1addr", 2 0, v0x24f8ba0_0;
v0x24f7ad0_0 .var "OUT1reg", 7 0;
v0x24f7b70_0 .alias "OUT2", 7 0, v0x24f8c70_0;
v0x24f7c30_0 .alias "OUT2addr", 2 0, v0x24f8d40_0;
v0x24f7cb0_0 .var "OUT2reg", 7 0;
v0x24f7da0_0 .alias "clk", 0 0, v0x24f8820_0;
v0x24f7e40_0 .var/i "i", 31 0;
v0x24f7f40_0 .var "regMemory", 63 0;
E_0x24f77b0 .event negedge, v0x24f7da0_0;
E_0x24f77e0 .event posedge, v0x24f7da0_0;
S_0x24f73f0 .scope module, "tcomp" "TwosComplement" 2 212, 2 92, S_0x24b4810;
 .timescale 0 0;
v0x24f74e0_0 .alias/s "INPUT", 7 0, v0x24f8b20_0;
v0x24f7590_0 .alias/s "OUTPUT", 7 0, v0x24f8e10_0;
v0x24f7640_0 .net *"_s0", 7 0, C4<00000000>; 1 drivers
L_0x24f98b0 .arith/sub 8, C4<00000000>, v0x24f7ad0_0;
S_0x24f6ff0 .scope module, "addsubMUX" "MUX" 2 213, 2 76, S_0x24b4810;
 .timescale 0 0;
v0x24f7110_0 .alias "CTRL", 0 0, v0x24f9160_0;
v0x24f71d0_0 .alias "INPUT1", 7 0, v0x24f8b20_0;
v0x24f7270_0 .alias "INPUT2", 7 0, v0x24f8e10_0;
v0x24f7310_0 .var "OUTPUT", 7 0;
E_0x24f70e0 .event edge, v0x24f7110_0, v0x24f7270_0, v0x24f71d0_0;
S_0x24f6bb0 .scope module, "immValMUX" "MUX" 2 214, 2 76, S_0x24b4810;
 .timescale 0 0;
v0x24f6d10_0 .alias "CTRL", 0 0, v0x24f9440_0;
v0x24f6dd0_0 .alias "INPUT1", 7 0, v0x24f8a50_0;
v0x24f6e70_0 .alias "INPUT2", 7 0, v0x24f9230_0;
v0x24f6f10_0 .var "OUTPUT", 7 0;
E_0x24f6ca0 .event edge, v0x24f6d10_0, v0x24f6e70_0, v0x24f6dd0_0;
S_0x24f6700 .scope module, "alu1" "ALU" 2 215, 2 7, S_0x24b4810;
 .timescale 0 0;
v0x24f6860_0 .alias "DATA1", 7 0, v0x24f9590_0;
v0x24f6920_0 .alias "DATA2", 7 0, v0x24f8c70_0;
v0x24f69c0_0 .alias "RESULT", 7 0, v0x24f8fb0_0;
v0x24f6a60_0 .var "Res", 7 0;
v0x24f6b10_0 .alias "SELECT", 2 0, v0x24f9080_0;
E_0x24f67f0 .event edge, v0x24f6b10_0, v0x24f6920_0, v0x24f6860_0;
    .scope S_0x2498cc0;
T_0 ;
    %wait E_0x2498de0;
    %load/v 8, v0x24f6660_0, 1;
    %cmpi/u 8, 1, 1;
    %jmp/1 T_0.0, 6;
    %cmpi/u 8, 0, 1;
    %jmp/1 T_0.1, 6;
    %jmp T_0.2;
T_0.0 ;
    %set/v v0x24b33b0_0, 0, 32;
    %jmp T_0.2;
T_0.1 ;
    %ix/load 0, 4, 0;
    %load/vp0 8, v0x24b33b0_0, 32;
    %set/v v0x24b33b0_0, 8, 32;
    %jmp T_0.2;
T_0.2 ;
    %jmp T_0;
    .thread T_0;
    .scope S_0x24f86b0;
T_1 ;
    %wait E_0x24f77b0;
    %load/v 8, v0x24f87a0_0, 32;
    %set/v v0x24f88d0_0, 8, 32;
    %jmp T_1;
    .thread T_1;
    .scope S_0x24f7fe0;
T_2 ;
    %wait E_0x24f80d0;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.0, 4;
    %load/x1p 8, v0x24f8630_0, 8;
    %jmp T_2.1;
T_2.0 ;
    %mov 8, 2, 8;
T_2.1 ;
; Save base=8 wid=8 in lookaside.
    %cmpi/u 8, 0, 8;
    %jmp/1 T_2.2, 6;
    %cmpi/u 8, 8, 8;
    %jmp/1 T_2.3, 6;
    %cmpi/u 8, 1, 8;
    %jmp/1 T_2.4, 6;
    %cmpi/u 8, 9, 8;
    %jmp/1 T_2.5, 6;
    %cmpi/u 8, 2, 8;
    %jmp/1 T_2.6, 6;
    %cmpi/u 8, 3, 8;
    %jmp/1 T_2.7, 6;
    %jmp T_2.8;
T_2.2 ;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.9, 4;
    %load/x1p 8, v0x24f8630_0, 3;
    %jmp T_2.10;
T_2.9 ;
    %mov 8, 2, 3;
T_2.10 ;
; Save base=8 wid=3 in lookaside.
    %cassign/v v0x24f8450_0, 8, 3;
    %load/v 11, v0x24f8630_0, 8; Only need 8 of 32 bits
; Save base=11 wid=8 in lookaside.
    %cassign/v v0x24f8210_0, 11, 8;
    %cassign/v v0x24f8500_0, 0, 1;
    %cassign/v v0x24f8580_0, 0, 1;
    %load/v 19, v0x24f8630_0, 3; Only need 3 of 32 bits
; Save base=19 wid=3 in lookaside.
    %cassign/v v0x24f82c0_0, 19, 3;
    %ix/load 1, 8, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.11, 4;
    %load/x1p 22, v0x24f8630_0, 3;
    %jmp T_2.12;
T_2.11 ;
    %mov 22, 2, 3;
T_2.12 ;
; Save base=22 wid=3 in lookaside.
    %cassign/v v0x24f8370_0, 22, 3;
    %ix/load 1, 16, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.13, 4;
    %load/x1p 25, v0x24f8630_0, 3;
    %jmp T_2.14;
T_2.13 ;
    %mov 25, 2, 3;
T_2.14 ;
; Save base=25 wid=3 in lookaside.
    %cassign/v v0x24f8140_0, 25, 3;
    %jmp T_2.8;
T_2.3 ;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.15, 4;
    %load/x1p 28, v0x24f8630_0, 3;
    %jmp T_2.16;
T_2.15 ;
    %mov 28, 2, 3;
T_2.16 ;
; Save base=28 wid=3 in lookaside.
    %cassign/v v0x24f8450_0, 28, 3;
    %load/v 31, v0x24f8630_0, 8; Only need 8 of 32 bits
; Save base=31 wid=8 in lookaside.
    %cassign/v v0x24f8210_0, 31, 8;
    %cassign/v v0x24f8500_0, 0, 1;
    %cassign/v v0x24f8580_0, 1, 1;
    %load/v 39, v0x24f8630_0, 3; Only need 3 of 32 bits
; Save base=39 wid=3 in lookaside.
    %cassign/v v0x24f82c0_0, 39, 3;
    %ix/load 1, 8, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.17, 4;
    %load/x1p 42, v0x24f8630_0, 3;
    %jmp T_2.18;
T_2.17 ;
    %mov 42, 2, 3;
T_2.18 ;
; Save base=42 wid=3 in lookaside.
    %cassign/v v0x24f8370_0, 42, 3;
    %ix/load 1, 16, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.19, 4;
    %load/x1p 45, v0x24f8630_0, 3;
    %jmp T_2.20;
T_2.19 ;
    %mov 45, 2, 3;
T_2.20 ;
; Save base=45 wid=3 in lookaside.
    %cassign/v v0x24f8140_0, 45, 3;
    %jmp T_2.8;
T_2.4 ;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.21, 4;
    %load/x1p 48, v0x24f8630_0, 3;
    %jmp T_2.22;
T_2.21 ;
    %mov 48, 2, 3;
T_2.22 ;
; Save base=48 wid=3 in lookaside.
    %cassign/v v0x24f8450_0, 48, 3;
    %load/v 51, v0x24f8630_0, 8; Only need 8 of 32 bits
; Save base=51 wid=8 in lookaside.
    %cassign/v v0x24f8210_0, 51, 8;
    %cassign/v v0x24f8500_0, 0, 1;
    %cassign/v v0x24f8580_0, 1, 1;
    %load/v 59, v0x24f8630_0, 3; Only need 3 of 32 bits
; Save base=59 wid=3 in lookaside.
    %cassign/v v0x24f82c0_0, 59, 3;
    %ix/load 1, 8, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.23, 4;
    %load/x1p 62, v0x24f8630_0, 3;
    %jmp T_2.24;
T_2.23 ;
    %mov 62, 2, 3;
T_2.24 ;
; Save base=62 wid=3 in lookaside.
    %cassign/v v0x24f8370_0, 62, 3;
    %ix/load 1, 16, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.25, 4;
    %load/x1p 65, v0x24f8630_0, 3;
    %jmp T_2.26;
T_2.25 ;
    %mov 65, 2, 3;
T_2.26 ;
; Save base=65 wid=3 in lookaside.
    %cassign/v v0x24f8140_0, 65, 3;
    %jmp T_2.8;
T_2.5 ;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.27, 4;
    %load/x1p 68, v0x24f8630_0, 3;
    %jmp T_2.28;
T_2.27 ;
    %mov 68, 2, 3;
T_2.28 ;
; Save base=68 wid=3 in lookaside.
    %cassign/v v0x24f8450_0, 68, 3;
    %load/v 71, v0x24f8630_0, 8; Only need 8 of 32 bits
; Save base=71 wid=8 in lookaside.
    %cassign/v v0x24f8210_0, 71, 8;
    %cassign/v v0x24f8500_0, 1, 1;
    %cassign/v v0x24f8580_0, 1, 1;
    %load/v 79, v0x24f8630_0, 3; Only need 3 of 32 bits
; Save base=79 wid=3 in lookaside.
    %cassign/v v0x24f82c0_0, 79, 3;
    %ix/load 1, 8, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.29, 4;
    %load/x1p 82, v0x24f8630_0, 3;
    %jmp T_2.30;
T_2.29 ;
    %mov 82, 2, 3;
T_2.30 ;
; Save base=82 wid=3 in lookaside.
    %cassign/v v0x24f8370_0, 82, 3;
    %ix/load 1, 16, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.31, 4;
    %load/x1p 85, v0x24f8630_0, 3;
    %jmp T_2.32;
T_2.31 ;
    %mov 85, 2, 3;
T_2.32 ;
; Save base=85 wid=3 in lookaside.
    %cassign/v v0x24f8140_0, 85, 3;
    %jmp T_2.8;
T_2.6 ;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.33, 4;
    %load/x1p 88, v0x24f8630_0, 3;
    %jmp T_2.34;
T_2.33 ;
    %mov 88, 2, 3;
T_2.34 ;
; Save base=88 wid=3 in lookaside.
    %cassign/v v0x24f8450_0, 88, 3;
    %load/v 91, v0x24f8630_0, 8; Only need 8 of 32 bits
; Save base=91 wid=8 in lookaside.
    %cassign/v v0x24f8210_0, 91, 8;
    %cassign/v v0x24f8500_0, 0, 1;
    %cassign/v v0x24f8580_0, 1, 1;
    %load/v 99, v0x24f8630_0, 3; Only need 3 of 32 bits
; Save base=99 wid=3 in lookaside.
    %cassign/v v0x24f82c0_0, 99, 3;
    %ix/load 1, 8, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.35, 4;
    %load/x1p 102, v0x24f8630_0, 3;
    %jmp T_2.36;
T_2.35 ;
    %mov 102, 2, 3;
T_2.36 ;
; Save base=102 wid=3 in lookaside.
    %cassign/v v0x24f8370_0, 102, 3;
    %ix/load 1, 16, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.37, 4;
    %load/x1p 105, v0x24f8630_0, 3;
    %jmp T_2.38;
T_2.37 ;
    %mov 105, 2, 3;
T_2.38 ;
; Save base=105 wid=3 in lookaside.
    %cassign/v v0x24f8140_0, 105, 3;
    %jmp T_2.8;
T_2.7 ;
    %ix/load 1, 24, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.39, 4;
    %load/x1p 108, v0x24f8630_0, 3;
    %jmp T_2.40;
T_2.39 ;
    %mov 108, 2, 3;
T_2.40 ;
; Save base=108 wid=3 in lookaside.
    %cassign/v v0x24f8450_0, 108, 3;
    %load/v 111, v0x24f8630_0, 8; Only need 8 of 32 bits
; Save base=111 wid=8 in lookaside.
    %cassign/v v0x24f8210_0, 111, 8;
    %cassign/v v0x24f8500_0, 0, 1;
    %cassign/v v0x24f8580_0, 1, 1;
    %load/v 119, v0x24f8630_0, 3; Only need 3 of 32 bits
; Save base=119 wid=3 in lookaside.
    %cassign/v v0x24f82c0_0, 119, 3;
    %ix/load 1, 8, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.41, 4;
    %load/x1p 122, v0x24f8630_0, 3;
    %jmp T_2.42;
T_2.41 ;
    %mov 122, 2, 3;
T_2.42 ;
; Save base=122 wid=3 in lookaside.
    %cassign/v v0x24f8370_0, 122, 3;
    %ix/load 1, 16, 0;
    %mov 4, 0, 1;
    %jmp/1 T_2.43, 4;
    %load/x1p 125, v0x24f8630_0, 3;
    %jmp T_2.44;
T_2.43 ;
    %mov 125, 2, 3;
T_2.44 ;
; Save base=125 wid=3 in lookaside.
    %cassign/v v0x24f8140_0, 125, 3;
    %jmp T_2.8;
T_2.8 ;
    %jmp T_2;
    .thread T_2, $push;
    .scope S_0x24f76c0;
T_3 ;
    %set/v v0x24f7f40_0, 0, 64;
    %end;
    .thread T_3;
    .scope S_0x24f76c0;
T_4 ;
    %wait E_0x24f77e0;
    %set/v v0x24f7e40_0, 0, 32;
T_4.0 ;
    %load/v 128, v0x24f7e40_0, 32;
   %cmpi/s 128, 8, 32;
    %jmp/0xz T_4.1, 5;
    %load/v 128, v0x24f7a50_0, 3;
    %movi 131, 0, 29;
    %muli 128, 8, 32;
    %load/v 160, v0x24f7e40_0, 32;
    %add 128, 160, 32;
    %ix/get 1, 128, 32;
    %jmp/1 T_4.2, 4;
    %load/x1p 128, v0x24f7f40_0, 1;
    %jmp T_4.3;
T_4.2 ;
    %mov 128, 2, 1;
T_4.3 ;
; Save base=128 wid=1 in lookaside.
    %ix/getv/s 0, v0x24f7e40_0;
    %jmp/1 t_0, 4;
    %set/x0 v0x24f7ad0_0, 128, 1;
t_0 ;
    %load/v 128, v0x24f7c30_0, 3;
    %movi 131, 0, 29;
    %muli 128, 8, 32;
    %load/v 160, v0x24f7e40_0, 32;
    %add 128, 160, 32;
    %ix/get 1, 128, 32;
    %jmp/1 T_4.4, 4;
    %load/x1p 128, v0x24f7f40_0, 1;
    %jmp T_4.5;
T_4.4 ;
    %mov 128, 2, 1;
T_4.5 ;
; Save base=128 wid=1 in lookaside.
    %ix/getv/s 0, v0x24f7e40_0;
    %jmp/1 t_1, 4;
    %set/x0 v0x24f7cb0_0, 128, 1;
t_1 ;
    %ix/load 0, 1, 0;
    %load/vp0/s 128, v0x24f7e40_0, 32;
    %set/v v0x24f7e40_0, 128, 32;
    %jmp T_4.0;
T_4.1 ;
    %jmp T_4;
    .thread T_4;
    .scope S_0x24f76c0;
T_5 ;
    %wait E_0x24f77b0;
    %set/v v0x24f7e40_0, 0, 32;
T_5.0 ;
    %load/v 128, v0x24f7e40_0, 32;
   %cmpi/s 128, 8, 32;
    %jmp/0xz T_5.1, 5;
    %ix/getv/s 1, v0x24f7e40_0;
    %jmp/1 T_5.2, 4;
    %load/x1p 128, v0x24f7830_0, 1;
    %jmp T_5.3;
T_5.2 ;
    %mov 128, 2, 1;
T_5.3 ;
; Save base=128 wid=1 in lookaside.
    %load/v 129, v0x24f7900_0, 3;
    %movi 132, 0, 29;
    %muli 129, 8, 32;
    %load/v 161, v0x24f7e40_0, 32;
    %add 129, 161, 32;
    %ix/get 0, 129, 32;
    %jmp/1 t_2, 4;
    %set/x0 v0x24f7f40_0, 128, 1;
t_2 ;
    %ix/load 0, 1, 0;
    %load/vp0/s 128, v0x24f7e40_0, 32;
    %set/v v0x24f7e40_0, 128, 32;
    %jmp T_5.0;
T_5.1 ;
    %jmp T_5;
    .thread T_5;
    .scope S_0x24f6ff0;
T_6 ;
    %wait E_0x24f70e0;
    %load/v 128, v0x24f7110_0, 1;
    %cmpi/u 128, 0, 1;
    %jmp/1 T_6.0, 6;
    %cmpi/u 128, 1, 1;
    %jmp/1 T_6.1, 6;
    %jmp T_6.2;
T_6.0 ;
    %load/v 128, v0x24f71d0_0, 8;
    %ix/load 0, 8, 0;
    %assign/v0 v0x24f7310_0, 0, 128;
    %jmp T_6.2;
T_6.1 ;
    %load/v 128, v0x24f7270_0, 8;
    %ix/load 0, 8, 0;
    %assign/v0 v0x24f7310_0, 0, 128;
    %jmp T_6.2;
T_6.2 ;
    %jmp T_6;
    .thread T_6, $push;
    .scope S_0x24f6bb0;
T_7 ;
    %wait E_0x24f6ca0;
    %load/v 128, v0x24f6d10_0, 1;
    %cmpi/u 128, 0, 1;
    %jmp/1 T_7.0, 6;
    %cmpi/u 128, 1, 1;
    %jmp/1 T_7.1, 6;
    %jmp T_7.2;
T_7.0 ;
    %load/v 128, v0x24f6dd0_0, 8;
    %ix/load 0, 8, 0;
    %assign/v0 v0x24f6f10_0, 0, 128;
    %jmp T_7.2;
T_7.1 ;
    %load/v 128, v0x24f6e70_0, 8;
    %ix/load 0, 8, 0;
    %assign/v0 v0x24f6f10_0, 0, 128;
    %jmp T_7.2;
T_7.2 ;
    %jmp T_7;
    .thread T_7, $push;
    .scope S_0x24f6700;
T_8 ;
    %wait E_0x24f67f0;
    %load/v 128, v0x24f6b10_0, 3;
    %cmpi/u 128, 0, 3;
    %jmp/1 T_8.0, 6;
    %cmpi/u 128, 1, 3;
    %jmp/1 T_8.1, 6;
    %cmpi/u 128, 2, 3;
    %jmp/1 T_8.2, 6;
    %cmpi/u 128, 3, 3;
    %jmp/1 T_8.3, 6;
    %set/v v0x24f6a60_0, 0, 8;
    %jmp T_8.5;
T_8.0 ;
    %load/v 128, v0x24f6860_0, 8;
    %set/v v0x24f6a60_0, 128, 8;
    %jmp T_8.5;
T_8.1 ;
    %load/v 128, v0x24f6860_0, 8;
    %load/v 136, v0x24f6920_0, 8;
    %add 128, 136, 8;
    %set/v v0x24f6a60_0, 128, 8;
    %jmp T_8.5;
T_8.2 ;
    %load/v 128, v0x24f6860_0, 8;
    %load/v 136, v0x24f6920_0, 8;
    %and 128, 136, 8;
    %set/v v0x24f6a60_0, 128, 8;
    %jmp T_8.5;
T_8.3 ;
    %load/v 128, v0x24f6860_0, 8;
    %load/v 136, v0x24f6920_0, 8;
    %or 128, 136, 8;
    %set/v v0x24f6a60_0, 128, 8;
    %jmp T_8.5;
T_8.5 ;
    %jmp T_8;
    .thread T_8, $push;
    .scope S_0x24b4810;
T_9 ;
    %set/v v0x24f9370_0, 0, 1;
T_9.0 ;
    %delay 10, 0;
    %load/v 128, v0x24f9370_0, 1;
    %inv 128, 1;
    %set/v v0x24f9370_0, 128, 1;
    %jmp T_9.0;
    %end;
    .thread T_9;
    .scope S_0x24b4810;
T_10 ;
    %vpi_call 2 225 "$display", "\012Operation      Binary   | Decimal";
    %vpi_call 2 226 "$display", "---------------------------------";
    %movi 128, 255, 8;
    %mov 136, 2, 8;
    %movi 144, 4, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 233 "$display", "load v1        %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 170, 8;
    %mov 136, 2, 8;
    %movi 144, 6, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 237 "$display", "load v2        %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 187, 8;
    %mov 136, 2, 8;
    %movi 144, 3, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 241 "$display", "load v3        %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 17106435, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 245 "$display", "add v4 (v2+v3) %b | %d\011(Here it's overflow)", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 33620997, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 249 "$display", "and v5 (v1,v4) %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 50462982, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 253 "$display", "or v6 (v5,v2)  %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 2, 8;
    %mov 136, 2, 8;
    %movi 144, 2063, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 257 "$display", "copy v7 (v6)   %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 151260931, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 261 "$display", "sub v8 (v7-v3) %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %vpi_call 2 265 "$display", "\012Operation      Binary   | Decimal";
    %vpi_call 2 266 "$display", "---------------------------------";
    %movi 128, 13, 8;
    %mov 136, 2, 8;
    %movi 144, 4, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 270 "$display", "load v1        %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 45, 8;
    %mov 136, 2, 8;
    %movi 144, 6, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 274 "$display", "load v2        %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 33, 8;
    %mov 136, 2, 8;
    %movi 144, 3, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 278 "$display", "load v3        %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 17106435, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 282 "$display", "add v4 (v2+v3) %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 33620997, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 286 "$display", "and v5 (v1,v4) %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 50462982, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 290 "$display", "or v6 (v5,v2)  %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 2, 8;
    %mov 136, 2, 8;
    %movi 144, 2063, 16;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 294 "$display", "copy v7 (v6)   %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %movi 128, 151260931, 32;
    %set/v v0x24f8ee0_0, 128, 32;
    %delay 20, 0;
    %vpi_call 2 298 "$display", "sub v8 (v7-v3) %b | %d", v0x24f8fb0_0, v0x24f8fb0_0;
    %vpi_call 2 300 "$finish";
    %end;
    .thread T_10;
# The file index is used to find the file name in the following table.
:file_names 3;
    "N/A";
    "<interactive>";
    "Project.v";
